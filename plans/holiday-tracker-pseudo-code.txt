Holiday Tracker Starter Code -

import datetime
import json (there is already a started json file with a few holidays in it)
import requests
from dataclasses import dataclass (going to use dataclasses instead of __init__ stuff)
from bs4 import BeautifulSoup


-----------------------------------------------------
	"# Modify the holiday class to 
	# 1. Only accept Datetime objects for date.
	# 2. You may need to add additional functions
	# 3. You may drop the init if you are using @dataclasses"
-----------------------------------------------------------
@dataclass

class Holiday:
	holiday_name: str
	date: datetime (does this make it so you can only input data as datetime format or do I need something else)

holiday_list []

------------------------------------------------------
        # String output
        # Holiday output when printed
------------------------------------------------------

print("Holidays:"
for i in holiday_list:
	print(f"{i.holiday_name}, {i.date"}

DateFormat = 'year, month, day"
NewDate = dt.strptime('date', DateFromat)
pint(DateFormat.strftime("%Y-%m-%d")
           
# -------------------------------------------
	# The HolidayList class acts as a wrapper and container
	# For the list of holidays
	# Each method has pseudo-code instructions
# --------------------------------------------

@dataclass
class Calendar:

	datelist = {'date': [holiday_list]} - this is a dictionary that holds the dates as the keys and the holidays as the values
	holiday_list []
	DateFormat = '%Y-%m-%d'

   
    def addHoliday(holidayObj):
        # Make sure holidayObj is an Holiday Object by checking the type
        # Use innerHolidays.append(holidayObj) to add holiday
        # print to the user that you added a holiday

def addHoliday(holiday_list)  ---- this is the code to add a new holiday
	for i in holiday_list[]
	new_holiay = Holiday(i[name],i[date]
	holiday_list.append(new_holiday)
	print("You've just added" + (new_holiday)!")







-----------------------------------------------------------------------------------------
    def findHoliday(HolidayName, Date):
        # Find Holiday in innerHolidays
        # Return Holiday
-----------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------
    def removeHoliday(HolidayName, Date):
        # Find Holiday in innerHolidays by searching the name and date combination.
        # remove the Holiday from innerHolidays
        # inform user you deleted the holiday
-----------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------
    def read_json(filelocation):
        # Read in things from json file location
        # Use addHoliday function to add holidays to inner list.
-----------------------------------------------------------------------------------------

findings = list()
with open("json file", "r",newline='',encoding="utf-8-sig") as 



-----------------------------------------------------------------------------------------
    def save_to_json(filelocation):
        # Write out json file to selected file.
-----------------------------------------------------------------------------------------  

holidays_json = json_req.json() - saying to add holiday data to json file

-----------------------------------------------------------------------------------------      
    def scrapeHolidays():
        # Scrape Holidays from https://www.timeanddate.com/holidays/us/ 
        # Remember, 2 previous years, current year, and 2  years into the future. You can scrape multiple years by adding year to the timeanddate URL. For example https://www.timeanddate.com/holidays/us/2022
        # Check to see if name and date of holiday is in innerHolidays array
        # Add non-duplicates to innerHolidays
        # Handle any exceptions.     
----------------------------------------------------------------------------------------------

(url) = given url
page = requests.get(url)


soup = BeautifulSoup(page.content, "html.parser")
results = soup.find("where the holidays and dates list is in HTML code")

try:
	holidays_req = requests.get(URL) - request to get holidays from website
except:
	print ("could not connect")  - if the connection fails
	exit(1)


holiday_elements = results.find_all("div", class_="class that holds all of the holiday info")

for holiday_element in holiday_elements: 
	print(holiday_element, end="\n") - find holiday and dates in html





-----------------------------------------------------------------------------------------
    def numHolidays():
        # Return the total number of holidays in innerHolidays
-----------------------------------------------------------------------------------------------------------------    
    def filter_holidays_by_week(year, week_number):
        # Use a Lambda function to filter by week number and save this as holidays, use the filter on innerHolidays
        # Week number is part of the the Datetime object
        # Cast filter results as list
        # return your holidays
-----------------------------------------------------------------------------------------
    def displayHolidaysInWeek(holidayList):
        # Use your filter_holidays_by_week to get list of holidays within a week as a parameter
        # Output formated holidays in the week. 
        # * Remember to use the holiday __str__ method.
-----------------------------------------------------------------------------------------
    def getWeather(weekNum):
        # Convert weekNum to range between two days
        # Use Try / Except to catch problems
        # Query API for weather in that week range
        # Format weather information and return weather string.
-----------------------------------------------------------------------------------------
    def viewCurrentWeek():
        # Use the Datetime Module to look up current week and year
        # Use your filter_holidays_by_week function to get the list of holidays 
        # for the current week/year
        # Use your displayHolidaysInWeek function to display the holidays in the week
        # Ask user if they want to get the weather
        # If yes, use your getWeather function and display results
-----------------------------------------------------------------------------------------


def main():
    # Large Pseudo Code steps
    # -------------------------------------
    # 1. Initialize HolidayList Object
    # 2. Load JSON file via HolidayList read_json function
    # 3. Scrape additional holidays using your HolidayList scrapeHolidays function.
    # 3. Create while loop for user to keep adding or working with the Calender
    # 4. Display User Menu (Print the menu)
    # 5. Take user input for their action based on Menu and check the user input for errors
    # 6. Run appropriate method from the HolidayList object depending on what the user input is
    # 7. Ask the User if they would like to Continue, if not, end the while loop, ending the program.  If they do wish to continue, keep the program going. 


if __name__ == "__main__":
    main();

while loop for menu
	print(welcome message to user, plus give choices between 1-5 to decide what they want to do

	choice = input("select a number between 1-5")
	
		if choice =1 - then: Add a Holiday
			input(input a holiday name")
			input(input holiday date - year-month-day format
			input += 1 - to keep track for when to save holiday
		check for validity
	
		
	if choice =2 - then: Remove a holiday
		input(input holiday name to remove:")
	check for validity

	if choice = 3: Save holiday list
		input("ould you like to save your changes? [y/n]: ")
		if y: addHoliday()
			print("save message")
		if n: print("your holiday has not been saved.) 
			main_loop()

	if choice = 4: View Holidays
		print("select a year and a week to view the holidays within that period")
		input("please input the year: ")
		input("please input the week selecting a number 1-52, leave blank for current week")
		Display_holidays_in_week()
		if blank:
			input("would you like to see the weather for as well? [y/n]")
			if input = y
				display weather with the holiday(Display_holidays_in Week) + (Display_weather)
			if input = n
				input("would you like to go back to main menu or view another week?" 1/2)
				if 
		
	check for validity

		



# Additional Hints:
# ---------------------------------------------
# You may need additional helper functions both in and out of the classes, add functions as you need to.
#
# No one function should be more then 50 lines of code, if you need more then 50 lines of code
# excluding comments, break the function into multiple functions.
#
# You can store your raw menu text, and other blocks of texts as raw text files 
# and use placeholder values with the format option.
# Example:
# In the file test.txt is "My name is {fname}, I'm {age}"
# Then you later can read the file into a string "filetxt"
# and substitute the placeholders 
# for example: filetxt.format(fname = "John", age = 36)
# This will make your code far more readable, by seperating text from code.